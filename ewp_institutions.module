<?php

/**
 * @file
 * Contains ewp_institutions.module.
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Render\Element;
use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Session\AccountInterface;
use Drupal\Core\Access\AccessResult;

/**
 * Implements hook_help().
 */
function ewp_institutions_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the ewp_institutions module.
    case 'help.page.ewp_institutions':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Drupal implementation of the EWP Institutions API') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_theme().
 */
function ewp_institutions_theme($existing, $type, $theme, $path) {
  return [
    'hei' => [
      'path' => $path . '/templates',
      'template'  => 'hei',
      'render element' => 'elements',
    ],
    'other_id' => [
      'variables' => [
        'value' => NULL,
        'type' => NULL,
      ],
    ],
    'other_id_unique' => [
      'variables' => [
        'value' => NULL,
        'type' => NULL,
      ],
    ],
  ];
}

/**
 * Implements hook_theme_suggestions_HOOK().
 */
function ewp_institutions_theme_suggestions_hei(array $variables) {
  $suggestions = [];
  $entity = $variables['elements']['#hei'];
  $sanitized_view_mode = strtr($variables['elements']['#view_mode'], '.', '_');

  $suggestions[] = 'hei__' . $sanitized_view_mode;
  $suggestions[] = 'hei__' . $entity->id();
  $suggestions[] = 'hei__' . $entity->id() . '__' . $sanitized_view_mode;
  return $suggestions;
}

/**
 * Prepares variables for Institution templates.
 *
 * Default template: hei.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - elements: An associative array containing the user information and any
 *   - attributes: HTML attributes for the containing element.
 */
function template_preprocess_hei(array &$variables) {
  // Helpful $content variable for templates.
  $variables['content'] = [];
  foreach (Element::children($variables['elements']) as $key) {
    $variables['content'][$key] = $variables['elements'][$key];
  }
  /** @var InstitutionEntityInterface $entity */
  $entity = $variables['elements']['#hei'];
  // provide the label
  $variables['label'] = $entity->label();
  // provide the alias
  $variables['url'] = $entity->toUrl()->toString();
  // provide the view mode
  $variables['view_mode'] = $variables['elements']['#view_mode'];
}

/**
 * Implements hook_entity_bundle_field_info_alter().
 */
function ewp_institutions_entity_bundle_field_info_alter(&$fields, EntityTypeInterface $entity_type, $bundle) {
  if ($entity_type->id() === 'hei') {
    if (isset($fields['hei_id'])) {
      $fields['hei_id']->addConstraint('UniqueField', []);
    }
  }
}

/**
 * Implements hook_jsonapi_entity_filter_access() for 'hei'.
 */
function ewp_institutions_jsonapi_entity_filter_access(EntityTypeInterface $entity_type, AccountInterface $account) {
  return ([
    JSONAPI_FILTER_AMONG_ALL => AccessResult::allowed(),
  ]);
}

/**
 * Implements hook_jsonapi_ENTITY_TYPE_filter_access() for 'hei'.
 */
function ewp_institutions_jsonapi_hei_filter_access(EntityTypeInterface $entity_type, AccountInterface $account) {
  return ([
    JSONAPI_FILTER_AMONG_ALL => AccessResult::allowedIfHasPermission($account, 'view unpublished institution entities'),
    JSONAPI_FILTER_AMONG_PUBLISHED => AccessResult::allowedIfHasPermission($account, 'view published institution entities'),
    JSONAPI_FILTER_AMONG_OWN => AccessResult::allowedIfHasPermission($account, 'view published institution entities'),
  ]);
}

/**
 * Implements hook_field_info_alter().
 *
 * @todo Remove once minimum version supported is at least 10.2.0.
 */
function ewp_institutions_field_info_alter(array &$info): void {
  // Allow module to work with older versions of Drupal.
  if (\version_compare(\Drupal::VERSION, '10.1.9999', '<')) {
    $info['ewp_other_hei_id']['category'] = t("EWP Institutions");
  }
}
